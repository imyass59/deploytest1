{"ast":null,"code":"import { DECREMENT, INCREMENT } from \"../actions/types\";\nconst initialState = {\n  count: 0\n};\n\nconst CountReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state,\n        count: state.count + 1\n      };\n\n    case DECREMENT:\n      return { ...state,\n        count: state.count - 1\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = CountReducer;\nexport default CountReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountReducer\");","map":{"version":3,"names":["DECREMENT","INCREMENT","initialState","count","CountReducer","state","action","type"],"sources":["C:/Users/Gun$moke/Desktop/Any One/ADV/reactJs/redux-store-v1/src/redux/reducers/CountReducer.js"],"sourcesContent":["import { DECREMENT, INCREMENT } from \"../actions/types\";\r\n\r\nconst initialState = { \r\n    count : 0,\r\n};\r\nconst CountReducer = (state = initialState ,action) =>\r\n{\r\n    switch(action.type) {\r\n        case INCREMENT:\r\n            return {...state,count : state.count + 1};\r\n        case DECREMENT:\r\n            return {...state,count : state.count - 1};\r\n        default:\r\n          return state;\r\n      }\r\n}\r\n\r\n\r\nexport default CountReducer;"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,kBAArC;AAEA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAG;AADS,CAArB;;AAGA,MAAMC,YAAY,GAAG,YACrB;EAAA,IADsBC,KACtB,uEAD8BH,YAC9B;EAAA,IAD4CI,MAC5C;;EACI,QAAOA,MAAM,CAACC,IAAd;IACI,KAAKN,SAAL;MACI,OAAO,EAAC,GAAGI,KAAJ;QAAUF,KAAK,EAAGE,KAAK,CAACF,KAAN,GAAc;MAAhC,CAAP;;IACJ,KAAKH,SAAL;MACI,OAAO,EAAC,GAAGK,KAAJ;QAAUF,KAAK,EAAGE,KAAK,CAACF,KAAN,GAAc;MAAhC,CAAP;;IACJ;MACE,OAAOE,KAAP;EANN;AAQH,CAVD;;KAAMD,Y;AAaN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}